<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据库性能调优]]></title>
    <url>%2Fliangxuejie.github.io%2F2017%2F08%2F15%2Fmysql-optimization%2F</url>
    <content type="text"><![CDATA[mysql数据库优化 数据库调优，就好比盖楼打地基，地基打得不稳，楼层一高，就会塌方。数据库也是如此，数据少，并发小，隐藏的问题是发现不了的，只要达到一定规模后，所有的问题就会全部曝露出来了，所以前期的设计阶段尤为重要。 数据库优化分类 硬件 网络 软件 硬件、网络取决于公司的经济实力。软件再分为表设计(字段类型、存储引擎)、SQl语句与索引、配置文件参数、体系架构等方面的优化。 表设计优化 一个好的数据库设计对于数据库的性能优化常常会起到事半功倍的效果。合理的数据库结构不仅可以使数据库占用更小的磁盘空间，而且能够使查询速度更快。 表优化的常用方法 将字段很多的表分解成多个表 对于字段较多的表，如果有些字段的使用频率很低，可以将这些字段分离出来形成新表。因为当一个表的数据量很大的时候，会由于使用频率低的字段的存在而变慢 增加冗余字段 设计数据库表时应尽量遵守范式理论的约定，尽可能减少冗余字段。但是合理地加入冗余字段也可以提高查询速度。这就是以空间换时间。 总结：在开发应用程序时，设计的数据库要最大程度地遵守三范式。但是，三范式最大的问题在于通常需要join很多表，而这个会导致查询效率很低。所以有时候基于性能考虑，我们需要有意违反三范式，适度的冗余，以达到提高查询效率的目的。 字段类型的选取 原则：选择字段的一般原则是保小不保大，能用占用字节少的字段就不用大字段。 1.数字类型 tinyint类型最大存储是255。 create table tmp(id tinyint); insert into tmp(id) values(256);//溢出 2.int(11) vs int(21) 存储空间还是存储范围有区别？ int(11)与int(21)的存储空间与存储范围是一样的。 区别是：如果你选择是int(11)，那么你存放了一个1，那么结果是1前面有10个0，int(21)前面有20个零 3.char char存储定长，容易造成空间的浪费。char数据类型存储大小最大为255字符。 最大255个字符的意思是最大只能存放255个字母或者255个汉字 4.varchar varchar存储变长，节省存储空间,varchar需要一位来存储长度。varchar是使用多少，就使用多少空间。所以通常都是选择varchar。 varchar数据类型可以存储超过255个字符 5.字符与字节的关系 如果是utf8字符集，因为utf8存放中文占用三个字节大小，所以存放两个中文需要6个字节大小。 一个英语字母无论什么情况下都是占用一个字节的，所以varchar(6)就可以存放github这个英语单词了 6.date date三个字节，如2015-05-01只能存储到天数。date精确到年月日 7.time time三个字节,只能存小时分钟，time精确到小时分钟秒 8.datetime datetime八字节，可以存储年月日时分秒 9.timestamp timestamp四字节，可以存储年月日时分秒。 字符串类型总结 char与varchar定义的长度是字符长度不是字节长度 存储字符串推荐选择使用varchar(n),n尽量小 采用合适的锁机制MySQL的锁有以下几种形式： 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率高，并发度最低。MyISAM属于这种类型。 行级锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率小，并发度最高。InnoDB就是行锁。 InnoDB引擎与MyISAM引擎对比 事务支持 MyISAM是非事务安全型的，而InnoDB是事务安全型的，也就是支持事务 锁机制 MyISAM锁是表锁，锁开销最小，而InnoDB支持行锁，锁管理开销大，支持更好的并发写操作。 文件保存形式 每张MyISAM表存放在3个文件中：frm文件存放表格存放，数据文件是MYD，索引文件是MYI 数据安全性 InnoDB表比MyISAM表更安全，因为InnoDB具有崩溃恢复能力。 如何选择表引擎 InnoDB支持行锁、事务。如果应用中需要执行大量的读写操作，应该选择InnoDB，这样可以提高多用户并发操作的性能。在MySQL5.5之后版本，Oracle已经很少支持MyISAM了，所以建议优先选择InnoDB引擎。 SQL优化与合理利用索引系统优化中一个很重要的方面就是SQL语句的优化。对于海量数据，劣质SQL语句和高效SQL语句之间的速度差别可以达到上百倍。 如何定位执行很慢的SQL语句开启慢查询日志的好处是可以通过记录、分析慢SQL语句来优化SQL语句 开启慢查询日志，在my.cnf配置文件中，加入以下参数：123slow_query_log = 1slow_query_log_file = mysql.slowlong_query_time = 1 # 超过2秒的SQL会记录下来 SQL语句优化建议1.limit分页优化2.避免使用*号，只查需要的字段3.可以使用冗余来减少关联表查询4.给经常作为where/order by/left join on/distinct字段添加索引5.尽量减少在MySQL中使用内置函数，减少在MySQL中进行运算6.使用预处理语句。例如使用PDO来操作mysql7.对查询进行优化，尽量避免全表扫描。首先应考虑在where以及order by涉及的列上建立索引。8.尽量避免在where子句中对字段进行null值判断。这会进行全表扫描9.尽量避免在where子句中对字段进行表达式操作。这会导致引擎放弃使用索引而进行全表扫描10.使用连接（join）代替子查询11.对于OR子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，如果没有索引，则应该考虑增加索引。减少使用文本类型(text)12.不要使用like,因为like会导致索引失效。 比如可以用全文搜索引擎会替换like,比如sphinx/xunsearch13.减少多表联查，可以适度冗余字段。 也可以通过切分多表联查语句，将多表联查变成单表查询14.尽量给字段加上NOT NULL 合理使用索引适当的索引对应用的性能来说相当重要，而且也建议在MySQL中使用索引，它的速度是很快的。 但是索引也是有成本的。每次向表中写入时，如果带有一个或多个索引，那么MySQL也要更新各个索引。索引还增加了数据库的规模，也就是说索引也是占据空间的。 只有当某列被用于where子句时，才能享受索引性能提升的好处。如果不使用索引，它就没有价值，而且会带来维护上的开销。 索引常见用法1.依据where查询条件建立索引 select a,b from tab a where c = ? //应该给c建立索引 2.使用联合索引，而不是多个单列索引 select * from tab where a = ? and b =? //给(a,b)建立联合索引，而不是分别给a,b建立索引 3.联合索引中索引字段的顺序根据区分度排，区分度大的放在前面 //(name,sex);//将name放前面，因为name的区分度更大。因为sex只有0 1 2 这个三个值。 4.合理创建联合索引，避免冗余 //(a),(a,b),(a,b,c)只要给(a,b,c)建立索引就行 5.order by 、group by 、 distrinct字段添加索引 用不到索引的情况1.字段使用函数，将不能用到索引 select createtime from aa where date(createtime) = curdate(); //where后面的字段(createtime)使用函数,将不会使用到索引。 2.用数字当字符类型，数字一定要加引号 select * from user where name = 123 //这SQL语句用不到name索引 select * from user where name = &apos;123&apos; //这样写才会用到name字段上的索引 3.在使用like关键字进行查询的语句中，如果匹配字符串的第一个字符为”%”，索引不会起作用。 4.联合索引，只有查询条件中使用了这些字段中第一个字段时，索引才会被使用 create index in_name on user(name,email) explain select * from user where name = &apos;jack&apos;; //用到索引 explain select * from user where email = &apos;jack@qq.com&apos;; //用不到索引 5.使用OR关键字的查询语句 查询语句的查询条件中只有OR关键字，且OR前后的两个条件中的列都是索引时，查询中才使用索引。否则查询将不使用索引。 6.order by 的字段混合使用asc和desc用不到索引 select * from user order by id desc,name asc; 7.where 子句使用的字段和order by 的字段不一致 select * from user where name = &apos;jack&apos; order by id; 8.对不同关键字使用order by 排序 select * from user order by name,id;]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP Ajax 跨域问题最佳解决方案]]></title>
    <url>%2Fliangxuejie.github.io%2F2017%2F07%2F30%2Fphp-ajax-crossdomain%2F</url>
    <content type="text"><![CDATA[php ajax 跨域问题 ajax跨域问题跨域请求除了在客户端用jsonp的方式实现外，还可以在服务端通过设置Access-Control-Allow-Origin来实现。 例如：客户端的域名是client.runoob.com，而请求的域名是server.runoob.com。 如果直接使用ajax访问，会有以下错误： XMLHttpRequest cannot load http://server.runoob.com/server.php. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.Origin &apos;http://client.runoob.com&apos; is therefore not allowed access. 允许单个域名访问指定某域名（http://client.runoob.com） 跨域访问，则只需在http://server.runoob.com/server.php文件头部添加如下代码： header(&apos;Access-Control-Allow-Origin:http://client.runoob.com&apos;); 允许多个域名访问指定多个域名（http://client1.runoob.com 、http://client2.runoob.com等）跨域访问，则只需在http://server.runoob.com/server.php文件头部添加如下代码：12345678910$origin = isset($_SERVER[&apos;HTTP_ORIGIN&apos;])? $_SERVER[&apos;HTTP_ORIGIN&apos;] : &apos;&apos;; $allow_origin = array( &apos;http://client1.runoob.com&apos;, &apos;http://client2.runoob.com&apos; ); if(in_array($origin, $allow_origin))&#123; header(&apos;Access-Control-Allow-Origin:&apos;.$origin); &#125; 允许所有域名访问允许所有域名访问则只需在http://server.runoob.com/server.php文件头部添加如下代码： header(&apos;Access-Control-Allow-Origin:*&apos;);]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LAMP环境的搭建]]></title>
    <url>%2Fliangxuejie.github.io%2F2017%2F07%2F16%2Flinux-lamp%2F</url>
    <content type="text"><![CDATA[linux、apache、mysql、php四个开源web黄金搭档 准备工作安装编译工具gcc、gcc-c++注意解决依赖关系，推荐使用yum安装，若不能联网可使用安装光盘做为yum源 1）编辑yum配置文件： 12345678# mount /dev/cdrom /mnt/cdrom# vim /etc/yum.repos.d/CentOS-Media.repo [c6-media] name=CentOS-$releasever - Media baseurl=file:///mnt/cdrom * 修改为光盘挂载点 gpgcheck=0 enabled=1 * 改为1意为启用 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 2）剪切/etc/yum.repos.d/CentOS-Base.repo # mv /etc/yum.repos.d/CentOS-Base.repo /backup 3）依次安装gcc、gcc-c++12# yum -y install gcc# yum -y install gcc-c++ 关闭系统RPM安装包的Apache、MySQL的服务关闭启动的服务httpd、mysqld12# service httpd stop# service mysqld stop 确定rpm包安装的httpd和mysqld不能开机自启动 chkconfig --level 2345 httpd（mysqld） off 关闭SELinux，允许防火墙80端口访问1）关闭SELinux123# vi /etc/selinux/config SELINUX=disabled * 若安装时没有禁用SELinux ，将enforcing改为disabled 修改后需重新启动Linux方可生效！ 2）关闭防火墙Netfilter/iptables 因尚未做防火墙讲解，直接简单的关闭所有防火墙设置：123# iptables -F * 如果没有禁用防火墙，默认80端口禁止访问# iptables -Z # iptables -X 关闭不必要自启动服务12345678910# ntsysv*以下列出服务可保持自启动，未列出的服务都可以关闭：atd crond * atd、crond计划任务irqbalancemicrocode_ctl * 系统irq端口调用，系统服务network *网络设置sendmail *邮件sshd *远程管理syslog *系统日志 拷贝源码包，解包解压缩建议将LAMP环境安装源码包统一存放在一个目录下，如/lamp。可编写个批量处理脚本，一次性把所有.tar.gz的安装包解包解压缩12345678910# vim tar.sh cd /lamp/bin/ls *.tar.gz &gt; ls.listfor TAR in `cat ls.list`do /bin/tar -zxf $TARdone/bin/rm ls.list# chmod u+x tar.sh# ./tar.sh 查看确认磁盘空间未满# df -h * 若/分区已满，可以移动安装包到其他分区或删除其他无用文件 编译安装 如何确定报错：1）安装过程停止2）停止后，一页界面中出现error 如何确定安装成功：进入安装目录，确认安装程序出现，就是成功 每个源码包配置编译安装完成后，确认安装目录下是否生成安装文件 安装libxml2Libxml2 是一个xml c语言版的解析器，本来是为Gnome项目开发的工具，是一个基于MIT License的免费开源软件。它除了支持c语言版以外，还支持c++、PHP、Pascal、Ruby、Tcl等语言的绑定，能在Windows、Linux、Solaris、MacOsX等平台上运行。功能还是相当强大的，相信满足一般用户需求没有任何问题。 libxml是一个用来解析XML文档的函数库。它用C语言写成, 并且能为多种语言所调用，例如C语言，C++，XSH。C#, Python，Kylix/Delphi，Ruby，和PHP等。Perl中也可以使用XML::LibXML模块。它最初是为GNOME开发的项目，但现在可以用在各种各样的方面。libXML 代码可移植性非常好，因为它基于标准的ANSI C库, 并采用MIT许可证。1234567#yum install -y libxml2-devel * 如果报错，安装此包后再尝试安装#mount /dev/sr0 /mnt/cdrom #yum -y install python-devel * 必须安装cd /lamp/libxml2-2.9.1./configure --prefix=/usr/local/libxml2/make make install 安装libmcryptlibmcrypt是加密算法扩展库。支持DES, 3DES, RIJNDAEL, Twofish, IDEA, GOST, CAST-256, ARCFOUR, SERPENT, SAFER+等算法。12345cd /lamp/libmcrypt-2.5.8./configure --prefix=/usr/local/libmcrypt/make make install* 需调用gcc-c++编译器，未安装会报错 安装libltdl也在libmcrypt源码目录中，非新软件。1234cd /lamp/libmcrypt-2.5.8/libltdl./configure --enable-ltdl-installmakemake install 安装mhashMhash是基于离散数学原理的不可逆向的php加密方式扩展库，其在默认情况下不开启。mhash的可以用于创建校验数值，消息摘要，消息认证码，以及无需原文的关键信息保存（如密码）等。1234cd /lamp/mhash-0.9.9.9./configure makemake install 安装mcryptmcrypt 是 php 里面重要的加密支持扩展库。Mcrypt库支持20多种加密算法和8种加密模式。123456cd /lamp/mcrypt-2.6.8LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/lib \./configure --with-libmcrypt-prefix=/usr/local/libmcrypt#以上为一条命令。LD_LIBRARY_PATH用于指定libmcrypt和mhash的库的位置。* --with-libmcrypt-prefix用于指定libmcrypt软件位置makemake install 安装zlibzlib是提供数据压缩用的函式库，由Jean-loup Gailly与Mark Adler所开发，初版0.9版在1995年5月1日发表。zlib使用DEFLATE算法，最初是为libpng函式库所写的，后来普遍为许多软件所使用。此函式库为自由软件，使用zlib授权。12345cd /lamp/zlib-1.2.3 ./configuremakemake install &gt;&gt; /root/zlib.log* zlib指定安装目录可能造成libpng安装失败，故不指定，为卸载方便，建议make install执行结果输出到安装日志文件，便于日后卸载 安装libpnglibpng 软件包包含 libpng 库.这些库被其他程式用于解码png图片。1234cd /lamp/libpng-1.2.31./configure --prefix=/usr/local/libpngmakemake install 安装jpeg6用于解码.jpg和.jpeg图片。1234567891011mkdir /usr/local/jpeg6 mkdir /usr/local/jpeg6/binmkdir /usr/local/jpeg6/libmkdir /usr/local/jpeg6/includemkdir -p /usr/local/jpeg6/man/man1*目录必须手工建立cd /lamp/jpeg-6b./configure --prefix=/usr/local/jpeg6/ --enable-shared --enable-staticmake make install* --enable-shared与--enable-static参数分别为建立共享库和静态库使用的libtool 安装freetypeFreeType库是一个完全免费(开源)的、高质量的且可移植的字体引擎，它提供统一的接口来访问多种字体格式文件，包括TrueType, OpenType, Type1, CID, CFF, Windows FON/FNT, X11 PCF等。支持单色位图、反走样位图的渲染。FreeType库是高度模块化的程序库，虽然它是使用ANSI C开发，但是采用面向对象的思想，因此，FreeType的用户可以灵活地对它进行裁剪。1234cd /lamp/freetype-2.3.5./configure --prefix=/usr/local/freetype/makemake install 安装Apacheconfigure: error: Bundled APR requested but not found at ./srclib/. Download and unpack the corresponding apr and apr-util packages to ./srclib/. #如果报错，则：12345tar zxvf apr-1.4.6.tar.gztar zxvf apr-util-1.4.1.tar.gz cp -r /lamp/apr-1.4.6 /lamp/httpd-2.4.7/srclib/aprcp -r /lamp/apr-util-1.4.1 /lamp/httpd-2.4.7/srclib/apr-util*解压apr和apr-util，复制并取消版本号 configure: error: pcre-config for libpcre not found. PCRE is required and available from #如果报错，则：123tar zxvf pcre-8.34.tar.gzcd /lamp/pcre-8.34 ./configure &amp;&amp; make &amp;&amp; make install checking whether to enable mod_ssl… configure: error: mod_ssl has been requested but can not be built due to prerequisite failures #如果报错，则：1234yum -y install openssl-devel* 删除之前安装的apache/usr/local/apache2/bin/apachectl stoprm -rf /usr/local/apache2 安装apache1234cd /lamp/httpd-2.4.7./configure --prefix=/usr/local/apache2/ --sysconfdir=/usr/local/apache2/etc/ --with-included-apr --with-z=/usr/local/zlib-1.2.3 --enable-so --enable-deflate=shared --enable-expires=shared --enable-rewrite=shared makemake install 如果报错在Linux Redhat6下面安装apache server的时候，执行完./configure命令后在执行make命令的时候报如下错误：/usr/bin/ld: /usr/local/lib/libz.a(crc32.o): relocation R_X86_64_32 against `.rodata’ can not be used when making a shared object; recompile with -fPIC 下载zlib-1.2.3.tar.gz放在/usr/local目录下执行以下命令：1234567tar -zxvf zlib-1.2.3.tar.gzcd zlib-1.2.3./configurevi Makefile*找到 CFLAGS=-O3 -DUSE_MMAP*在后面加入-fPIC，即变成CFLAGS=-O3 -DUSE_MMAP -fPIC搜索make &amp;&amp; make install 如果报错ssl，则：12./configure --prefix=/usr/local/apache2/ --sysconfdir=/usr/local/apache2/etc/ --with-included-apr --with-z=/usr/local/zlib --with-ssl=/usr/local/openssl --enable-ssl --enable-so --enable-deflate=shared --enable-expires=shared --enable-rewrite=shared * 若前面配置zlib时没有指定安装目录，Apache配置时不要添加--with-z=/usr/local/zlib/参数 启动Apache测试：123/usr/local/apache2/bin/apachectl startnetstat –tlun | grep :80* 若启动时提示/usr/local/apache2/modules/mod_deflate.so无权限，可关闭SELinux或者执行命令chcon -t texrel_shlib_t /usr/local/apache2/modules/mod_deflate.so ，类似此类.so文件不能载入或没有权限的问题，都是SELinux问题，使用命令：“chcon -t texrel_shlib_t 文件名”即可解决，MySQL和Apache也可能有类似问题。 通过浏览器输入地址访问：http://Apache服务器地址，若显示“It works”即表明Apache正常工作 设置Apache系统引导时启动： echo &quot;/usr/local/apache2/bin/apachectl start&quot; &gt;&gt; /etc/rc.d/rc.local 安装ncursesNcurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。123456789yum -y install ncurses-devel*注：如果报错，包找不到，是*通配符没有识别，给文件名加双引号 “ncurses*”cd /lamp/ncurses-5.9./configure --with-shared --without-debug --without-ada --enable-overwritemake make install* 若不安装ncurses编译MySQL时会报错* --without-ada参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；--enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录* --with-shared 生成共享库 安装cmake和bisonmysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。bison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统12yum -y install cmakeyum -y install bison 安装MySQL12345678groupadd mysqluseradd -g mysql mysql* 添加用户组mysql ，将mysql用户默认组设置为mysql用户组cd /lamp/mysql-5.5.48cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_USER=mysql -DMYSQL_TCP_PORT=3306makemake install 如果报错，清除缓存，请使用以下命令12make clean rm CMakeCache.txt 修改mysql目录权限123cd /usr/local/mysql/chown -R mysql .chgrp -R mysql 创建数据库授权表，初始化数据库 /usr/local/mysql/scripts/mysql_install_db --user=mysql 修改mysql目录权限12chown -R root .chown -R mysql data 复制mysql配置文件 cp support-files/my-medium.cnf /etc/my.cnf 二次授权 /usr/local/mysql/scripts/mysql_install_db --user=mysql 启动MySQL服务： 1）用原本源代码的方式去使用和启动mysql /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; 2）重启以后还要生效:12vim /etc/rc.local /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; 3）设定mysql密码123456789101112/usr/local/mysql/bin/mysqladmin -uroot password 123456*清空历史命令 history -c*给mysql用户root加密码123*注意密码不能写成 “123” /usr/local/mysql/bin/mysql -u root -p mysql&gt;show databases;mysql&gt;use test;mysql&gt;show tables;mysql&gt;\s *查看字符集是否改为utf8* 进入mysql以后用set来改密码mysql&gt; exit* 登录MySQL客户端控制台设置指定root密码 安装PHP编译前确保系统已经安装了libtool和libtool-ltdl软件包，安装：12345yum -y install &quot;libtool*&quot;cd /lamp/php-7.0.7./configure --prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/ --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql=/usr/local/mysql/ --with-libxml-dir=/usr/local/libxml2/ --with-jpeg-dir=/usr/local/jpeg6/ --with-png-dir=/usr/local/libpng/ --with-freetype-dir=/usr/local/freetype/ --with-gd --with-mcrypt=/usr/local/libmcrypt/ --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-soap --enable-mbstring=all --enable-sockets --with-pdo-mysql=/usr/local/mysql --without-pearmake make install 生成php.ini12cp /lamp/php-7.0.7/php.ini-production /usr/local/php/etc/php.ini #mkdir /usr/local/php/etc/ 测试Apache与PHP的连通性，看Apache是否能解析php文件1234vim /usr/local/apache2/etc/httpd.confAddType application/x-httpd-php .php .phtml * 这里写入了http.conf最后了AddType application/x-httpd-php-source .phps（注意大小写）* .phtml为将.phps做为PHP源文件进行语法高亮显示 重启Apache服务：123/usr/local/apache2/bin/apachectl stop/usr/local/apache2/bin/apachectl start* Apache无法启动，提示cannot restore segment prot after reloc: Permission denied错误，为SELinux问题，可关闭SELinux或者执行命令chcon -t texrel_shlib_t /usr/local/apache2/modules/libphp5.so 测试：1234vim /usr/local/apache2/htdocs/test.php &lt;?php phpinfo();?&gt; 通过浏览器输入地址访问：http://Apache服务器地址/test.php;Rpm包安装的网页默认目录 /var/www/html/;*有时第一次浏览器测试会失败，关闭浏览器重启再尝试即可，非编译错误。 添加环境变量1234567891011$ whereis php$ echo $PATH#/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin$ export PATH=/usr/local/php/bin:$PATH$ echo $PATH#/usr/local/php/bin:/usr/local/php/bin:/usr/lib/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/binvim /etc/profile在最后一行加上export PATH=&quot;/usr/local/php/bin:$PATH&quot; export PATH=&quot;/usr/local/mysql/bin:$PATH&quot;$ source /etc/profile 安装opensslOpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。1234567yum -y install openssl-devel * 必须安装cd /lamp/php-7.0.7/ext/opensslmv config0.m4 config.m4 * 否则报错：找不到config.m4/usr/local/php/bin/phpize ./configure --with-openssl --with-php-config=/usr/local/php/bin/php-config makemake install 修改/usr/local/php/etc/php.ini12345extension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-zts-20151012/&quot;*打开注释，并修改extension=&quot;openssl.so&quot;;*添加*重启apache，在phpinfo中可以找到这个模块 安装phpMyAdmin123456cp -r /lamp/phpMyAdmin-4.1.4-all-languages /usr/local/apache2/htdocs/phpmyadmincd /usr/local/apache2/htdocs/phpmyadmincp config.sample.inc.php config.inc.phpvim config.inc.php$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;] = &apos;cookie&apos;;$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;] = &apos;http&apos;; 设置auth_type为http ，即设置为HTTP身份认证模式通过浏览器输入地址访问：http://Apache服务器地址/phpmyadmin/index.php用户名为root ，密码为MySQL设置时指定的root密码123（lampbrother）]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>lamp环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fliangxuejie.github.io%2F2017%2F07%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[你好，世界]]></content>
  </entry>
</search>